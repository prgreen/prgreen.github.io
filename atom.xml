<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Bill Green]]></title>
  <link href="http://prgreen.github.io/atom.xml" rel="self"/>
  <link href="http://prgreen.github.io/"/>
  <updated>2013-09-20T09:08:20-07:00</updated>
  <id>http://prgreen.github.io/</id>
  <author>
    <name><![CDATA[Bill Green]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Node.js, socket.io, jQuery, ntwitter, node-cron]]></title>
    <link href="http://prgreen.github.io/blog/2013/09/20/node-dot-js-socket-dot-io-jquery-ntwitter-node-cron/"/>
    <updated>2013-09-20T06:29:00-07:00</updated>
    <id>http://prgreen.github.io/blog/2013/09/20/node-dot-js-socket-dot-io-jquery-ntwitter-node-cron</id>
    <content type="html"><![CDATA[<p>The most commonly advertised strengths of <a href="http://nodejs.org/">Node</a> are:</p>

<ul>
  <li><strong>Performance</strong>: Improved throughput and better latency in typical cases where the database queries are the limiting performance factor (not CPU).</li>
  <li><strong>Scalability</strong>: Solving the C10K problem by using optimized OS-specific network interfaces (epoll/kqueue, IOCP).</li>
  <li><strong>Productivity</strong>: The node module ecosystem will provide immediately usable solutions for most of your needs, allowing a very short time to market, or fast prototyping. Javascript as a server language is a debatable but pragmatic choice, since everyone already knows it, and JSON apis or communication with clients are made trivial.</li>
  <li><strong>Socket.io</strong>: Undoubtedly one of the “killer features”, allows for impressive realtime one-page web apps that can compete with regular native software, without the hassles of deployment or cross-platform compatibility (the browser takes care of that).</li>
</ul>

<p>The one strength that draws me back to node regularly is the productivity boost. It would be possible to use alternatives like Python and <a href="http://www.gevent.org/">gevent</a>, with <a href="http://www.gelens.org/code/gevent-websocket/">gevent-websocket</a>, with a micro-framework like <a href="http://flask.pocoo.org/">Flask</a>. The parts feel more disconnected and pip is not as dead simple as npm, so deployment will always be harder than just “npm install”, but Python is arguably a more comfortable language, and the coroutine approach has a shorter learning curve than node’s callback nesting. People who like Ruby could probably argue that Ruby on Rails can achieve comparable results, despite falling somewhat out of fashion these last few years.</p>

<p>You can have an <strong>idea</strong>, and implement a <strong>working prototype</strong> in no time (whether the prototype can scale as advertised without careful planning is another more controversial story).</p>

<p>Imagine the following idea:</p>

<blockquote>
  <p>I want a website where I can watch tweeted pictures of a city in realtime.</p>
</blockquote>

<p>We’ll take San Francisco for our example, but any location in the world is possible. </p>

<h2 id="an-example-project-world-o-vision">An example project: “World-o-vision”</h2>

<p>I assume the reader has at least basic familiarity with Node, underscore.js, and socket.io.</p>

<p>We’ll use this fantastic <a href="http://www.dillonbuchanan.com/programming/node-js-twitter-streaming-api-socket-io-twitter-cashtag-heatmap/">blog article</a> to bootstrap our code.</p>

<p>The whole code will soon be available from a GitHub repository, for now I’ll explain the highlights.</p>

<p>We’ll use <a href="http://expressjs.com/">express</a> as our web application framework of choice, for convenience, although we only have one route (it’s a one page web app).</p>

<p>We’ll use <a href="https://dev.twitter.com/docs/streaming-apis">Twitter streaming API</a> (version 1.1). The awesome <a href="https://github.com/AvianFlu/ntwitter">ntwitter</a> node module makes it easier to use Twitter API from Node.</p>

<p><strong>You will need your own Twitter keys to make this work, since every account is limited to one connection.</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>app.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">//After node configuration...</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">NPICS</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">picList</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class="line">
</span><span class="line"><span class="c1">// routes</span>
</span><span class="line"><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">data</span><span class="o">:</span> <span class="nx">picList</span> <span class="p">});</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="c1">// socket.io server</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">sio</span> <span class="o">=</span> <span class="nx">io</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">server</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">sio</span><span class="p">.</span><span class="nx">sockets</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;connection&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">socket</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="nx">_</span><span class="p">.</span><span class="nx">last</span><span class="p">(</span><span class="nx">picList</span><span class="p">,</span> <span class="nx">NPICS</span><span class="p">));</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="c1">// twitter streamer</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">twitter</span><span class="p">({</span>
</span><span class="line">    <span class="nx">consumer_key</span><span class="o">:</span> <span class="s1">&#39;USE_YOUR_OWN&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="nx">consumer_secret</span><span class="o">:</span> <span class="s1">&#39;USE_YOUR_OWN&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="nx">access_token_key</span><span class="o">:</span> <span class="s1">&#39;USE_YOUR_OWN&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="nx">access_token_secret</span><span class="o">:</span> <span class="s1">&#39;USE_YOUR_OWN&#39;</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="nx">t</span><span class="p">.</span><span class="nx">stream</span><span class="p">(</span><span class="s1">&#39;statuses/filter&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">locations</span> <span class="o">:</span> <span class="s1">&#39;-122.75,36.8,-121.75,37.8&#39;</span> <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">stream</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">stream</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">tweet</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nx">tweet</span><span class="p">.</span><span class="nx">text</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="c1">//console.log(tweet.text+&#39;\n&#39;);</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="nx">tweet</span><span class="p">.</span><span class="nx">entities</span> <span class="o">!=</span> <span class="kc">undefined</span> <span class="o">&amp;&amp;</span> <span class="nx">tweet</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">media</span> <span class="o">!=</span> <span class="kc">undefined</span> <span class="o">&amp;&amp;</span> <span class="nx">tweet</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">media</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">media_url</span> <span class="o">!=</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="nx">picList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">tweet</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">media</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">media_url</span><span class="p">);</span>
</span><span class="line">            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">picList</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span><span class="line">            <span class="nx">sio</span><span class="p">.</span><span class="nx">sockets</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="nx">_</span><span class="p">.</span><span class="nx">last</span><span class="p">(</span><span class="nx">picList</span><span class="p">));</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The node server will connect to the Twitter streaming API, filter tweets by location (San Francisco in our example), add <strong>all links to tweeted photos in a list</strong>, and send either the last (more recent) 10 elements of the list (first update) or the individual elements (in subsequent realtime updates) to the client.</p>

<p>We limit ourselves to 10 pictures to avoid straining the browser too much. On the server side though, we could save all photo links regularly to a database, if we wanted.</p>

<p>For now we’ll use this problem as an excuse to use the lovely node-cron module, and we’ll ask the list to be emptied every 20 minutes:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="k">new</span> <span class="nx">cronJob</span><span class="p">(</span><span class="s1">&#39;0 */20 * * * *&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class="line">    <span class="nx">picList</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class="line">    <span class="p">},</span> <span class="kc">null</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We can devise a simple design for a client:</p>

<ul>
  <li>display 9 pictures as thumbnails in a row, clicking a thumbnail opens the picture in another tab or window, in its original size</li>
  <li>display one large picture underneath (the last received)</li>
</ul>

<p>The client-side javascript can be quickly hacked together with a simple jade template:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>worldovision.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">socket</span> <span class="o">=</span> <span class="nx">io</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hostname</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="kd">var</span> <span class="nx">picList</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">NBPICS</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">function</span> <span class="nx">updatePics</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#pictures&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class="line">      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span> <span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">picList</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span> <span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#pictures&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;&lt;a href=&quot;&#39;</span> <span class="o">+</span> <span class="nx">picList</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39;:large&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;&#39;</span> <span class="o">+</span> <span class="nx">picList</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39;:thumb&quot;&gt;&lt;/a&gt;&#39;</span><span class="p">);</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#big-picture&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;&lt;img src=&quot;&#39;</span> <span class="o">+</span> <span class="nx">picList</span><span class="p">[</span><span class="nx">picList</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39;:large&quot;&gt;&#39;</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span><span class="p">(</span><span class="nx">data</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="nx">picList</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
</span><span class="line">            <span class="nx">picList</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">picList</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">NBPICS</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="nx">picList</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;=</span> <span class="nx">NBPICS</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                <span class="nx">picList</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">//remove first element</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">            <span class="nx">picList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">       <span class="nx">updatePics</span><span class="p">();</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>index.jade</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="jade"><span class="line"><span class="nt">extends</span> layout
</span><span class="line">
</span><span class="line"><span class="nt">block</span> content
</span><span class="line">  <span class="nf">#pictures</span>
</span><span class="line">  <span class="nf">#big-picture</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Although jQuery makes DOM manipulation easy and solves our problem, it’s worth noting that AngularJS components are usually the best long-term solution with a more correct level of abstraction.</p>

<p>The result can be observed here (available soon).</p>

<p>All the photos are realtime tweeted pictures from San Francisco!</p>

<p>All that can be coded and presented as a prototype, in less time than it took me to write this article!</p>

<h2 id="possibilities-for-future-evolutions">Possibilities for future evolutions</h2>

<ul>
  <li>
    <p>We could add more interaction with the users by asking them to mark their favorite pictures. At the end of every day, we select the most liked pictures, more deserving of representing the city they originate from.</p>
  </li>
  <li>
    <p>We could offer the use a choice of cities. Wonder what people are eating in Paris? Connect to World-o-vision at the right time of the day, and you’ll know!</p>
  </li>
  <li>
    <p>Elect the most attractive city, based on how liked the tweeted pictures from each city are.</p>
  </li>
  <li>
    <p>Have various sources of photos to inject in our application, for example using the Instagram API.</p>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitter use cases are infinite]]></title>
    <link href="http://prgreen.github.io/blog/2013/09/13/twitter-use-cases-are-infinite/"/>
    <updated>2013-09-13T02:11:00-07:00</updated>
    <id>http://prgreen.github.io/blog/2013/09/13/twitter-use-cases-are-infinite</id>
    <content type="html"><![CDATA[<p>There’s a fundamental problem with Twitter, that is also a blessing: No one knows exactly how it should be used.</p>

<p>If you look at a single tweet, it’s already a mess, it could have all kinds of form or function:</p>

<ul>
  <li>self-contained text-only</li>
  <li>retweet</li>
  <li>response that can only be understood with the previous tweets of the conversation</li>
  <li>“hey, check this out” (the message can be meaningless, sometimes it’s a summary) with a link to proper content</li>
  <li>a description of an image, with the image attached, where the image is probably the most important part</li>
  <li>varying, arbitrary, collision-vulnerable, manually attached hashtags. Some are only semantic (they add context to interpret what is written), some also have practical uses (regrouping Instagram pictures). Some are associated to a specific meaningful trend, some are just pleasantries.</li>
  <li>it could originate from a bot or a human, sometimes it’s hard to know. It could be from an individual, from a brand, from a group of people, from someone managing a celebrity account, from someone claiming to be someone else, etc.</li>
</ul>

<p>If you were to design the perfect and definitive “Twitter terminal” for every possible use of Twitter, you would have impossible ever-changing requirements. At the beginning for example, you could naively assume displaying text was enough, and an old non-smart phone with SMS capabilities was all you needed. But now you need images. You want geolocalization. You end up needing a complete web browser to follow URLs. Or even specialized software to extract meaning out of thousands of tweets.</p>

<p>This is why all sorts of third-party software exist: to help you make sense out of Twitter and provide new use cases.</p>

<p>Sure, patterns and “best practices” have emerged for typical personal use. But new ones can be imagined.</p>

<h2 id="whats-next">What’s next?</h2>

<p>Twitter is not just about individual micro-blogging anymore, especially with the introduction of premium accounts. It can simply be used as a generic platform for communication between companies/celebrities/gurus/content producers and the masses.</p>

<p>Companies want the publicity and feedback, masses want to be informed on the new products, make suggestions, and eventually buy stuff.</p>

<p>With the Twitter API, it’s easy to imagine infinitely many new use cases, based on “practical hashtags”, that can be used by customers to place orders when they send tweets to a specific company bot account.</p>

<p>Have order-by-tweet pizzerias. You send them your address once, then you place your orders when you want. A tweet is easier and more explicit than a phone call.
It has an associated timestamp and undeniable source, so you can check delivery speed claims, and there can be no ambiguity or shenanigans about who ordered what. With geolocalization added, you could be sitting on a park bench and still have your pizza delivered to you.</p>

<p>Of course, as of today, modern society assumes pretty much everyone has a phone, but you can’t assume everyone has a smartphone, or a Twitter account or knows how to use it or wants to. But the expectations of what is normal or not are shifting. In the future tweeting could be a ubiquitous activity any human being is assumed to be able to do, for a variety of purposes, like selecting entrees at a restaurant without the need to ever talk to a waiter (because you see, in the future people are all rendered socially awkward by all the time spent on their smartphones and computers). The telephone was widely adopted because of its practicality, and if Twitter can achieve the same level of practicality in its own domain, we can expect the same success in future generations.</p>

<p>Tweets as inputs to computer programs are not just useful to consumers, they help companies observe the realtime trends and act accordingly.</p>

<p>You can have social events with people voting by tweet instead of SMS (but hey, TV shows need the money).</p>

<p>If people have more incentives to tweet (I mean, more than social validation, tweets can get you stuff), if their tweet can trigger complex processes with more visible consequences, they will obviously tweet more and more people will tweet, all of which benefits Twitter.</p>

<p>Tweets in the future could be used as a way to trigger any verifiable transaction. Despite the outrage it would cause, Twitter might eventually offer <em>all</em> their users the possibility to confirm their real identity, because the possible applications are endless, from voting in elections to money transactions (now you have your viable business model, guys).</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vine is the new haiku]]></title>
    <link href="http://prgreen.github.io/blog/2013/09/13/vine-is-the-new-haiku/"/>
    <updated>2013-09-13T01:15:00-07:00</updated>
    <id>http://prgreen.github.io/blog/2013/09/13/vine-is-the-new-haiku</id>
    <content type="html"><![CDATA[<p>What is the consequence of forcing users to an incredibly constrained six seconds video format?</p>

<ul>
  <li>
    <p>The meaning is condensed. No more 5 minute video with only a few seconds of interesting action you could have skipped to directly. </p>
  </li>
  <li>
    <p>Consistency is enforced. There is just no time to tackle multiple subjects or be distracted from your original point.</p>
  </li>
  <li>
    <p>Ease of use. Anyone can make a 6 second video. Following the rules is not the hard part. </p>
  </li>
</ul>

<h2 id="its-twitter-all-over-again">It’s Twitter all over again</h2>

<p>The major trap with Vine or Twitter, or any fixed form of communication (haiku, sonnet, etc.), is that most people are tempted to use them for spontaneous (and usually meaningless) outbursts, when they should be carefully crafted and thought out for maximum impact.</p>

<h2 id="can-vine-really-be-advertised-as-a-new-art-form">Can Vine really be advertised as a new art form?</h2>

<p>In itself, Vine is only a vector for communication. It’s up to the people to use them as they want, the same way Twitter is used differently by brands, celebrities, ‘gurus’, teenagers, etc.</p>

<p>Conciseness has never been an obstacle to depth, and Vine is certainly capable of harboring art.</p>

<p>Sure, a lot of Vine videos are ADHD kids doing pointless crap, the same way most tweets are random angsty comments you could live without, and most haikus are mediocre attempts.</p>

<p>It doesn’t mean the form is flawed, but that it is used in frivolous ways.</p>

<p>Vine is currently experimental and teeming with general bizarrerie. But we can expect that it will stabilize, and that the same thing will happen to Vine that happened to Twitter:</p>

<p>People will learn to use it effectively.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speech is slowly becoming an obsolete emergency-only communication protocol]]></title>
    <link href="http://prgreen.github.io/blog/2013/09/12/speech-is-slowly-becoming-an-obsolete-emergency-only-communication-protocol/"/>
    <updated>2013-09-12T13:55:00-07:00</updated>
    <id>http://prgreen.github.io/blog/2013/09/12/speech-is-slowly-becoming-an-obsolete-emergency-only-communication-protocol</id>
    <content type="html"><![CDATA[<p>Observing the real world you can notice this trend:</p>

<ul>
  <li>
    <p>People in social situations (parties, conferences, dates…) texting on their smartphone instead of speaking to other people.</p>
  </li>
  <li>
    <p>People in companies preferring to communicate via a collaborative textual chat, rather than speaking, sometimes with people a few feet away.</p>
  </li>
  <li>
    <p>Young people who have no idea how to express themselves with words, people interviewed by television stumbling constantly for words, etc. ; when in the good old times, it seems people were generaly more articulate and confident speakers. </p>
  </li>
</ul>

<p>People don’t like to speak anymore? We can try to understand the reasons why.</p>

<ul>
  <li>
    <p>Speaking is not as necessary as it used to be. Alternative ways are simpler, usually require no formal greetings or keeping your attention focused, and are asynchronous (fire a text and forget about it until your friend reads it), while speaking requires synchronization of participants. Asynchronous is the future, the programmers say!</p>
  </li>
  <li>
    <p>Speaking is vulnerable to ambient sounds. Our bustling modern world has constant background noise. Talking in public transportation can become tiring or tedious, while texting is still fine. </p>
  </li>
  <li>
    <p>The information in everything you say is immediately lost if it’s not recorded or remembered. This is incredibly wasteful compared to text protocols.</p>
  </li>
  <li>
    <p>People spend more time communicating on social media, because it catches their interest by design, and they feel that maintaining a relationship with friends is more important than striking up random conversations with strangers, which are always hit-or-miss.</p>
  </li>
  <li>
    <p>Speech is always unfiltered. And you don’t decide who gets to talk to you or not. For example panhandlers can choose to harass you with their voice, but they can’t reach you on your smartphone. Arguably, writing notes or texts to you would be somewhat less impactful anyway.</p>
  </li>
  <li>
    <p>You need to start the speaking procedure by something like “Hey” and close it by something like “OK, see ya”. If your start directly talking about what you want to say, or just walk away when you’re finished talking, you’re a psycho.</p>
  </li>
  <li>
    <p>Speech is not as easily processed by computers in meaningful ways. Speech recognition is still awkward to use.</p>
  </li>
  <li>
    <p>You might have to repeat yourself a lot to make sure all people hear/understand you well, especially on the phone.</p>
  </li>
  <li>
    <p>Feeling ignored while talking is the worst feeling. Feeling ignored while texting is a more subdued form of reject.</p>
  </li>
</ul>

<p>In conclusion, it’s possible to argue that trying not to speak too much is an optimization, a way towards a better attention/information ratio.</p>

<h2 id="why-do-we-even-speak">Why do we even speak?</h2>

<p>OK, let’s not kid ourselves, the power of speech is important. Historically it was our best communication protocol for millions of years, a major turning point that confirmed the slow separation from our monkey cousins.</p>

<p>But really look at it from an exterior perspective: it’s a flawed and archaic protocol in the modern world.</p>

<p>The only advantages of speech compared to other communication protocols are:</p>

<ul>
  <li>
    <p>The ability to broadcast a message to multiple geographically close persons easily.</p>
  </li>
  <li>
    <p>Sensing involuntary body language and how feelings influence voices. This use of speech is especially irreplaceable in situations where you want to evaluate whether a person is trying to oversell him/herself, during dates, job interviews, business meetings, etc. You would never consider doing any of these activities through just a mail exchange.</p>
  </li>
  <li>
    <p>Making sure you have the complete attention of someone. A good “Hey!” will always have priority over whatever the person is involved in.</p>
  </li>
  <li>
    <p>Shouting to warn someone of an impending danger.</p>
  </li>
</ul>

<p>Objectively in an “augmented human” society where everyone has access to a communicating device, you could replace every use case of speech by text protocols, except maybe in case of emergency.</p>

<p>Well even then, I suppose you could implement differentiated ringtones or sound alerts depending on the content or special hashtags of the texts you receive on your smartphone.</p>

<p>But sound is not the most urgent or highest priority protocol available to mankind. When someone punches you in the face or kisses you on the mouth, their intent is obvious and immediately brought to your attention.</p>

<p>Smartphones being capable only of text and sound (as of today), it’s fun to imagine how the world would be changed if they could act physically on you, via a bluetooth extension in your brain to control you, for example.</p>

<p>Why be content with your smartphone triggering a sound alarm as it detects a bus with broken brakes coming right at you, when your smartphone could trigger your body to get out of the way, without wasting time to think, and with an unbeatable reaction time?</p>

<p>Shy in public? Not confident with your body language in the presence of women? Preload your smartphone with a selection of prerecorded body language from the most confident public speakers in the world, specifically tuned to the tastes of your target audience, and let your bluetooth brain extension direct your every move!</p>

<p>So yeah, the world is changing.</p>

<p>If the current evolution of technology is prolonged to its logical conclusion, it’s safe to assume everything you know about humanity might be unrecognizable in a hundred years.</p>

<p>I suspect speaking might become truly unnecessary once humans are all equipped with wireless binary data transceivers wired to a hybrid processor/brain.</p>

<h2 id="what-about-speech-commands-xbox-one-ps4-kinect-ps-eye">What about speech commands, Xbox One, PS4, Kinect, PS Eye?</h2>

<p>Don’t they prove that speech, and body language, and all archaic forms of communication, are the future?</p>

<p>A <em>modern</em> trend to focus on speech and body language, the two most primitive communication protocols available to mankind? How could that be?</p>

<p>And what about virtual reality and the buzz around Oculus Rift? It seems using the “natural” protocols of humanity and have the computer adapt to you, instead of asking unnatural things like pressing buttons, or entering text commands, is the future of gaming, or what?</p>

<p>I’m not the only one to think it’s not progress, although most people would have a difficult time articulating why.</p>

<p>Simply these technologies cater to people’s monkey brains, trying to increase sales by having the simplest requirements possible, the lowest common denominator, using communication protocols that everyone, even your mother, even your grandmother, use everyday.</p>

<p>And guess what, it works. People who would never play video games can understand that making the gesture of punching someone will hurt enemies, running will make you run, etc.</p>

<p>No need to press buttons anymore (a physical way of sending binary data!) to make the console do things, you talk and order it, like you would in a normal social situation.</p>

<p>Is it the future of gaming? At least it’s a way to attract more people to video games, younger kids, seniors, families, etc.</p>

<p>But the “energy spent”/”fun” ratio is really bad, and the more obsessive “optimizing” gamers will obviously find no interest in that, and are not the target audience anyway.</p>

<h2 id="ok-so-no-speech-then-whats-in-the-future">OK, so, no speech… then what’s in the future?</h2>

<p>The most refined way you can interact with a gaming console is not speech or moving your arms around: it’s basically a computer, so the best way for it to understand what you want is… just programming it.</p>

<p>Pressing buttons means forcing the game program to follow different parts in the code based on your stream of binary input. What if you had more freedom than that, and could actually script your interactions with the games, essentially having your own code as a part of the game?</p>

<p>I would not be surprised if the future of gaming was just that: games where you interact with a world by programming parts of it.</p>

<p>Of course programming is hard for our monkey brains, we’re slow at it and make a lot of mistakes, it’s not always fun, which seems to defeat the purpose of a game. But we might evolve to a point where computers are so ubiquitous that programming skills are a required part of being a normal human being, just like basic math or speaking a natural language is required for every normal human being now.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Evolution towards a unique language for all humans is inevitable]]></title>
    <link href="http://prgreen.github.io/blog/2013/09/12/evolution-towards-a-unique-language-for-all-humans-is-inevitable/"/>
    <updated>2013-09-12T11:09:00-07:00</updated>
    <id>http://prgreen.github.io/blog/2013/09/12/evolution-towards-a-unique-language-for-all-humans-is-inevitable</id>
    <content type="html"><![CDATA[<p>This is obviously a sensitive subject, especially when so many countries make deliberate efforts to preserve their own language.</p>

<p>Objections to a unique language make sense:</p>

<ul>
  <li>
    <p>A language perpetuates the culture of a people or nation (litterature, laws, concepts, are shaped by language).</p>
  </li>
  <li>
    <p>People will never give up their mother tongue willingly, so a unique language would have to be enforced globally with totalitarian techniques, and you don’t want that.</p>
  </li>
  <li>
    <p>No one language is capable of expressing everything perfectly.</p>
  </li>
  <li>
    <p>You’d need a consensus on which language humanity would adopt.</p>
  </li>
  <li>
    <p>People will prefer learning multiple languages rather than fully adopting a common one.</p>
  </li>
  <li>
    <p>People will break any attempt of a unique language by inventing their own words, simplifying, creating new ones, modifying the pronunciation, language is an ever evolving process and nothing can be set in stone once and for all.</p>
  </li>
</ul>

<p>All these objections are valid. In reality, evolving towards a unique language is already taking place, English being obviously the favored global language for business, trade, etc.</p>

<p>The need for a common ground with people you interact with is made more pressing by the Internet. The days are past, when most people would spend all their life speaking only to their geographical neighbors.</p>

<p>By personal experience I can say that the “invasion” of English into the French language, for example, is felt strongly as a threat by the older French generations, and not so much by the young, who are now taught English from age 7, even before they know how to use their mother tongue properly.</p>

<p>No one will be able to stop the process. After all, in year 3000 French is already a dead language.</p>

<iframe width="420" height="315" src="http://prgreen.github.io//www.youtube.com/embed/7osGfFTQVtU?rel=0" frameborder="0" allowfullscreen=""></iframe>

<p>Regional languages of French (they are plentiful… France is a gathering of multiple old “tribes”, not just Paris) are even more doomed, they are in fact already dying and a historical curiosity rather than functional languages, despite ongoing revival attempts in French schools. Strong regional accents that can be found easily among seniors are softened by the influence of the uniform accent of television and other mass media.</p>

<p>I even read about English middle-aged persons appalled by some young people sounding more and more American. </p>

<p>Of course everywhere where people are isolated, or in ghettos, or when specific efforts are made to preserve a language (French in Quebec for example is unlikely to just die out), the uniformity can never fully reach them.</p>

<p>Now imagine this “connected” future, maybe dozens or hundreds of years from now, everyone using exclusively social media and talking through cybernetic implants, not only with people closer to them geographically, but with people from all over the world with the same interests.</p>

<p>If this is indeed the evolution of the world, all languages will eventually die out except one.</p>

<p>Just by interacting, you lose your specificity, your idiosyncrasies must be abandoned. I can’t speak regional <a href="http://en.wikipedia.org/wiki/Picard_language">Picard</a> anymore (yes, just like the Star Trek captain, this is not a mere coincidence) when I’m in California, and it’s unlikely my future children will ever hear a word of it, while my grandparents used to speak it almost exclusively.</p>

<p>A world where everybody interacts constantly with everyone, like in social media, tends to be more uniform. The French youth watch Breaking Bad. Because it’s discussed everywhere on Twitter. The French youth use the invented frenchized verb “liker” instead of “aimer”, for Facebook likes.</p>

<p>Emotionally rejected by many, fearful of a George Orwell’s dystopian <em>Newspeak</em>, a unique language would make (and already makes, since you’re reading this blog and you’re not necessarily a native English speaker) pragmatic sense.</p>

<h2 id="is-english-the-answer">Is English the answer?</h2>

<p>You could argue that English is already the common language of the world, and in many ways it obviously is. Sadly, English is broken, and it shows. </p>

<ul>
  <li>
    <p>It’s a bastard language, so there are <a href="http://en.wikipedia.org/wiki/List_of_English_words_with_dual_French_and_Anglo-Saxon_variations">multiple words</a> for many things when one could theoretically be enough and greatly simplify the learning process for people all over the world.</p>
  </li>
  <li>
    <p>You can’t know the correct pronunciation of a word by just reading it, if you never heard it pronounced before.</p>
  </li>
  <li>
    <p>Vowels in general are shifted in various crazy ways. You can never be sure (shoor? shir? shor?) which one is preferred in this or that part of the world.</p>
  </li>
  <li>
    <p>A rather simple and elegant grammar crippled with unfortunate bizarre exceptions (not as bad as French, though).</p>
  </li>
  <li>
    <p>The pronunciation of English, “accents”, stressing words and sentences properly, is very hard for a lot of nations in the world. It’s all musical and slippery, when strong syllabic pronunciations (in French, German, Japanese) feel more consistent in this area. </p>
  </li>
  <li>
    <p>Even when you’re comfortable with, say, a generic American accent, you can have all sorts of trouble understanding the crazy British local accents.</p>
  </li>
</ul>

<p>Can there be, conceptually, a language “good enough” that it could boast the necessary paradigm shift required for immediate and durable global adoption?</p>

<p>Of course many tries have been made historically, to form a language that everyone in the world could speak easily, some with reasonable success (<a href="http://en.wikipedia.org/wiki/Esperanto">Esperanto</a>).</p>

<h2 id="what-would-be-the-desirable-properties-a-common-language">What would be the desirable properties a common language?</h2>

<p>It would be nice if it were strongly logical, consistent, and with no ability to diverge from the original idea.</p>

<p>In our current world, with our current monkey brains, it’s close to impossible. We have poetry, ambiguity, play on words, litterature, portmanteaux, our languages are wild and free, which is arguably a good thing.</p>

<p>But imagine a future, thousands of years from now, where human beings are half-robots with incredible computing power wired to their brains, capable of enforcing rules strongly, and they spend all their time discussing with every other person on a hive-like Earth.</p>

<p>It’s possible humans will not even speak or write anymore, just exchange data instantly in binary form, wirelessly.</p>

<p>The following properties can be achieved, making natural languages an inferior alternative:</p>

<ul>
  <li>
    <p>our unique language has no ambiguity. Everything is expressed clearly. No intent is ever misunderstood.</p>
  </li>
  <li>
    <p>our unique language can easily be processed by computer programs. Sentences in natural languages can be formally verified and then used as integral parts of mathematical proofs. </p>
  </li>
  <li>
    <p>our unique language punishes any divergence from the accepted norms by being rendered automatically incomprehensible when even one bit of it is invalid.</p>
  </li>
</ul>

<p>While it sounds like a 70s novel futuristic dystopia, it would at least make the programmer’s task considerably easier.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[True hackers need math]]></title>
    <link href="http://prgreen.github.io/blog/2013/09/11/hackers-need-math/"/>
    <updated>2013-09-11T04:26:00-07:00</updated>
    <id>http://prgreen.github.io/blog/2013/09/11/hackers-need-math</id>
    <content type="html"><![CDATA[<h1 id="and-an-intuitive-comprehension-of-whats-happening-in-their-code">(and an intuitive comprehension of what’s happening in their code)</h1>

<p>More and more software developers in the start-up world are the product of necessity. While their technical knowledge of programming is usually good, their understanding of mathematics is sometimes really disappointing, and is a real handicap in their job.</p>

<p>Now, don’t get me wrong, I’m not <em>particularly</em> good at math, and I’m an engineer so I should feel bad about it, but when I can constantly notice the flaws in my colleagues’ or friends’ work or reasoning, that makes it all the more alarming.</p>

<p>Math is indisputably at the heart of programming, the same way it’s the heart of physics, or engineering, or anything that allows us to understand or manipulate the evolution of reality in quantifiable ways.</p>

<p>From what I’ve seen, “genius hacker college dropout kids” seem to be the most affected by the lack of mathematical knowledge. To them programming is mastering the specificities of a technology and use it to create cool stuff fast, or as a means to disrupt society’s power balance in their favor. Since it’s a valuable skill after all, they obtain sufficient gratification from their coding skills alone, and they never get around to learning real math to help them progress past a certain critical point, which is a handicap in all but the most trivial problems a programmer has to face. So they end up plateauing pretty hard despite a promising start, and prefer abandoning coding altogether and just doing business. Only the more “mathematical” geniuses can continue enjoying programming for years in a somewhat autotelic fashion (I’m thinking John Carmack and his recent tech-heavy speech at QuakeCon 2013). </p>

<h2 id="a-few-tales-of-mathematical-ignorance">A few tales of mathematical ignorance</h2>

<p>I promise those people are actually brilliant professional coders otherwise, but not understanding the math behind what they do is definitely a source of problems.</p>

<hr />

<p><strong>Example 1</strong>: Implementing the <a href="http://en.wikipedia.org/wiki/Glicko_rating_system">Glicko</a> rating system (to assess players’ strength in an online game)</p>

<p>“Can you implement this formula?”</p>

<p>=&gt; “Wait, what’s a logarithm?”</p>

<p>(and then not understanding the difference between natural logarithm of ten in base e, and logarithm in base ten)</p>

<hr />

<p><strong>Example 2</strong>: </p>

<p>“If your background image is too heavy for our website, you can try drawing more uniformly colored areas instead of varying the shades everywhere.”</p>

<p>=&gt; “I don’t get it, if the image size doesn’t change, it has the same number of pixels so the download size remains the same for the users.”</p>

<p>No. Dude. No. Not even close. Images displayed on a website are in a compressed format! Try comparing a big image with white only (compression works perfectly, 1kB) and a an image with the same size and every single pixel set to a random value (compression becomes useless, your image now weighs a few MB…).</p>

<p>Information entropy, fast fourier transform, are complicated but useful notions.</p>

<hr />

<p><strong>Example 3</strong>:</p>

<p>Not a dialog, but I see a lot of programmers who like to obsess over time and space complexities (using a fragile understanding of big O notations), saying “I’ll just use quicksort because it has the best time complexity and I want it to be fast”.</p>

<p>Actually when sorting an input they should consider all the aspects: </p>

<ul>
  <li>
    <p>in some cases the size of the input will remain low enough that more “complex” but simpler to understand algorithms with more favourable multiplicative constants are faster.</p>
  </li>
  <li>
    <p>if the size of the input is high but there are very few possible values, bucket sort beats quicksort.</p>
  </li>
  <li>
    <p>circumstances can justify using other algorithms, for example if the input is received by chunks over the network and needs to be constantly sorted, heap sort might be more adapted. </p>
  </li>
</ul>

<h2 id="google-coding">“Google coding”</h2>

<p>Applying formulas or following recipes is no substitute for an intuitive understanding of what’s happening inside your code.</p>

<p>The general spirit of not wanting to think or do math but just “have fun” or “make something awesome” results in an annoying trend: the so-called “Google coders”, people who will use Google extensively to solve their problems, copy-paste and adapt some code without fully understanding what they’re doing, not really checking the internals, or wondering why it should work.</p>

<p>It’s OK to do that sometimes, and tapping into the internet hivemind might feel like a decent way to increase your productivity instantly. But mostly it’s just laziness.</p>

<p>There are indeed a few glaring flaws with this approach:</p>

<ul>
  <li>
    <p>You end up trying to connect black boxes of code together, with potential impedance mismatch or lack of general consistency in your project.</p>
  </li>
  <li>
    <p>How do you test code you don’t understand? How do you handle memory, errors, exceptions, tests, that were not in the original code because the author wanted to keep things simple?</p>
  </li>
  <li>
    <p>You don’t learn anything that you can reapply in the future in similar circumstances using principles extracted from your intuitive comprehension of the problem.</p>
  </li>
  <li>
    <p>If you don’t understand exactly what you need in your specific problem, your solution won’t exactly answer your problem.</p>
  </li>
  <li>
    <p>No progress or breakthrough in technology was ever made by people who sacrifice for comfort the need to think. </p>
  </li>
</ul>

<p>Many programmers have the right idea when they try to roll their own piece of software (like, coding your blog platform or yet another content management system), and only then use all the available tools and libraries made by others and refined by years of use, understanding the intent behind every design decision and API call.</p>

<p>One immense advantage is that, when something breaks, you already know or imagine how the internals are made, and you can easily go fix it yourself (instead of waiting for the maintainer to manifest himself).  </p>

<p>I would only use “google coding” in emergency situations, for fun coding marathons, where I would be convinced the code quality and maintainability matters less than getting something out in record time.</p>

<h2 id="worse-than-google-coders-microsoft-black-magic-coders">Worse than “Google coders”: “Microsoft black magic coders”</h2>

<p>I’m not talking about people who work for Microsoft itself, who, I’m sure, are mostly brilliant people with a true passion for programming, for which I have a lot of respect.</p>

<p>I’m talking about people who believe they can get all the complicated parts of programming out of programming.</p>

<p>I talk to some of my friends who work and code for very big companies and are forced to use Microsoft products everywhere. </p>

<p>Microsoft products are great and make everything easier, except when they break, and they break all the time. I’m not blaming Microsoft particularly, everything breaks all the time, it’s called entropy, and it’s an inevitable part of the physical universe. Everyone can realize that programming is inherently hard, and it’s inevitable that sometimes, people will use your program in unforeseeable ways.</p>

<p>What I could blame Microsoft for, however, is that trying to hide all the implementation details and making programming simpler for a generation of subpar brainwashed programmers makes it harder to fix the inevitable problems one will encounter.</p>

<p>When something breaks in a fully open source stack, it’s relatively easy to identify which part, where, to correct the problem, to submit a fix to the maintainers, etc. It’s a very good feeling for a programmer, and it trains a generation of people who understand what happens at every level in their code, which is very sound and satisfying.</p>

<p>Microsoft deprives people from this feeling, by making the disputable (but economically justified) strategy choice to make everything “their way”, close-sourced and with voluntary divergence from internationally accepted norms or open interoperable formats.</p>

<p>Every programmer who uses Microsoft products is treated like a child, maintained in a state of voluntary ignorance, brainwashed into accepting a mix of archaic constructs and new idiomatically named features, given comparatively lower powers for fear that they could break things, and when (inevitably) something does break, no one has any idea what’s actually happening, and they are forced to call “experts” to unblock the situation.</p>

<p>I like to call them “black magic coders” because they see programming as summoning the powers of the dark side and pray that they consent to help. If Microsoft doesn’t provide any specific magical way to do what they want, they are distraught and helpless because they have no idea how to reimplement the basics by themselves.</p>

<p>I’ve talked to a software engineer with years of experience working with .Net and C#, who had no idea whether the huge web app they were making used “regular” HTTP calls or Ajax. Everything had always been abstracted away to him, to the point he had trouble making the connection between Microsoft mumbo jumbo and the actual underlying technologies used. </p>

<p>They memorize acronyms, standardized solutions, common answers good enough to pass their Microsoft certificate, and have a Pavlovian relationship to programming. </p>

<p>It’s fine to abstract away the implementation details, but only if you know what’s behind them in case you need to know, which happens often with those hard-to-find bugs where you hit a limitation or implementation quirk of the underlying technology.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perseverance and probability]]></title>
    <link href="http://prgreen.github.io/blog/2013/09/10/perseverance-and-probability/"/>
    <updated>2013-09-10T14:47:00-07:00</updated>
    <id>http://prgreen.github.io/blog/2013/09/10/perseverance-and-probability</id>
    <content type="html"><![CDATA[<p><strong>Problem: Trying n times something that has a 1 in n chance of success.</strong></p>

<p>For example, n = 2 means having 2 tries to guess the result of a coin flip.</p>

<p>For n = 6, you have 6 tries to guess the result of rolling a standard die.</p>

<p>The probability of success P can also be expressed as “one minus the probability of every try failing”.
$$
P(n) = 1 - \Big(1-\frac{1}{n}\Big)^n
$$</p>

<p>A surprisingly high number of people have a very flawed understanding of probabilities, even with mathematical backgrounds, and will just assume without thinking that P is always 1 or converges towards 1 as n goes to infinity. None of these propositions are true. </p>

<h2 id="what-is-the-limit-as-n-goes-to-infinity">What is the limit as n goes to infinity?</h2>

<p>If you try sufficiently hard something that has a very low chance of success, you will always succeed (your probability of success converges towards 1), so most people would be tempted to say that P converges towards 1. But that’s not the question.</p>

<p>The question is: if you try <em>exactly</em> n times something that has a 1 in n chance of success, and n grows very big, how good are your chances? Let’s call P the probability of success.</p>

<script type="math/tex; mode=display">
lim_{n\to\infty}P(n) = 1 - lim_{n\to\infty}\Big(1-\frac{1}{n}\Big)^n
</script>

<p>Numerically if you tried a few values of n you would realize that the right expression converges quickly towards a number that is neither 0 nor 1.</p>

<p>Remembering one of the definitions of <strong>e</strong>, the Euler number:</p>

<script type="math/tex; mode=display">
e = lim_{n\to\infty}\Big(1+\frac{1}{n}\Big)^n
</script>

<p>it becomes easy to realize that</p>

<script type="math/tex; mode=display">
lim_{n\to\infty}P(n) = 1 - e ^{-1} \approx 0.63212
</script>

<p>A <em>63% chance of success</em> means you’re a winner in the long term if you’re used to <em>trying a million times</em> something that has a <em>one in a million chance</em> of success.</p>

<h2 id="wacky-logic-les-shadoks">Wacky logic: “Les Shadoks”</h2>

<p><img class="center" src="http://prgreen.github.io/images/shadok.jpg" /></p>

<blockquote>
  <p>“If there is one in a million chance to succeed, rush failing the 999,999 first tries.”</p>
</blockquote>

<p>During my childhood in France in the 90s, an old animated TV series from the late 60s called “Les Shadoks” was still running, that had been a significant cultural phenomenon among older generations. I remember it being very funny, and you should definitely check it out on Youtube if you understand French, and are prepared to feel overwhelmed with utter confusion and culture shock. Some of the ridiculously wrong and illogical Shadok mottos are still heard today in France, although since then end of the show less and less people know where they come from (“Pourquoi faire simple quand on peut faire compliqué ?” =&gt; “Why do it the easy way when you can do it the hard way?”).</p>

<p><img class="center" src="http://prgreen.github.io/images/shadok2.jpg" /></p>

<blockquote>
  <p>“Better to pump even if nothing happens than to risk something worse happening by not pumping”</p>
</blockquote>

<p>It had the most bizarre, absurd and eerie stories, and an unhealthy obsession with useless and endless pumping, but more importantly for our current discussion, the Shadoks, stupid and ruthless bird-like creatures, keep dying in atrocious circumstances because of how flawed their “logic” is.</p>

<p>One example that particularly struck me as a child: the Shadoks want to build a rocket to travel from their dysfunctional home planet to the Earth. Their most renowned mathematician calculates that their plan has a one in a million chance of success, then claims that all they have to do is rebuild the same rocket over and over again until it inevitably works when they reach 1 million attempts.</p>

<blockquote>
  <p>“When one tries continuously, one ends up succeeding. Thus, the more one fails, the greater the chance that it will work.”</p>
</blockquote>

<p>Even 7 year-old me knew it couldn’t be right (and anyone who understands basic probabilities is warned specifically against this fallacy), but it took me years to figure out the real probability of success.</p>

<p>Approximately 63% is actually a pretty good chance for the Shadoks, given their general incompetence.</p>

<p><img class="center" src="http://prgreen.github.io/images/shadok3.jpeg" /></p>

<blockquote>
  <p>The Shadok brain can only memorize 4 words, so they count using a base 4 number system. They were my first introduction to non-decimal bases, at age 7, or BU MEU. </p>
</blockquote>

<p><img class="center" src="http://prgreen.github.io/images/shadok4.gif" /></p>

<p>Here’s a link to a video explaining Shadok counting (in French): <a href="http://www.youtube.com/watch?v=nm0cw6b1PMA">Shadok counting</a></p>

<h2 id="applied-probabilities-picking-up-women-or-men">Applied probabilities: picking up women (or men)</h2>

<p>What are the odds that a girl you meet randomly in public agrees immediately to date you? The chances are pretty slim (although you’d be surprised how much blunt honesty works), especially now that I know you’d rather spend your free time reading through my ramblings instead of going outside making friends or something.</p>

<p>But the point is: the chances are small, but non-negligible, let’s say 1%. Ask every woman you meet during the day, in public transportation, on the streets, and more often than not (63% if you ask 100 girls out), you will end up dating someone today with little effort (probably someone really easy or mentally unstable, but that’s your problem now).</p>

<p>No need for sophisticated matching algorithms, loneliness in our contemporary societies is easily solved by brute force<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>!</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>I am not liable for tragic misunderstandings of this sentence.<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
